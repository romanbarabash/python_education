# coding: utf-8

"""
    Issue Tracker

    This application implements a very simple issue tracker.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from client.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'severity': 'int',
        'effort': 'int',
        'status': 'str',
        'assigned_to': 'User',
        'reported_by': 'User'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'severity': 'severity',
        'effort': 'effort',
        'status': 'status',
        'assigned_to': 'assignedTo',
        'reported_by': 'reportedBy'
    }

    def __init__(self, id=None, title=None, description=None, severity=None, effort=None, status=None, assigned_to=None, reported_by=None, _configuration=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._description = None
        self._severity = None
        self._effort = None
        self._status = None
        self._assigned_to = None
        self._reported_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if severity is not None:
            self.severity = severity
        if effort is not None:
            self.effort = effort
        if status is not None:
            self.status = status
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if reported_by is not None:
            self.reported_by = reported_by

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501

        A unique identifier for the task. These are created in ascending order.  # noqa: E501

        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        A unique identifier for the task. These are created in ascending order.  # noqa: E501

        :param id: The id of this Task.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Task.  # noqa: E501

        The title for a task.   # noqa: E501

        :return: The title of this Task.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Task.

        The title for a task.   # noqa: E501

        :param title: The title of this Task.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501

        The task description is a longer, more detailed description of the issue.   # noqa: E501

        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.

        The task description is a longer, more detailed description of the issue.   # noqa: E501

        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def severity(self):
        """Gets the severity of this Task.  # noqa: E501


        :return: The severity of this Task.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Task.


        :param severity: The severity of this Task.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def effort(self):
        """Gets the effort of this Task.  # noqa: E501

        the level of effort required to get this task completed  # noqa: E501

        :return: The effort of this Task.  # noqa: E501
        :rtype: int
        """
        return self._effort

    @effort.setter
    def effort(self, effort):
        """Sets the effort of this Task.

        the level of effort required to get this task completed  # noqa: E501

        :param effort: The effort of this Task.  # noqa: E501
        :type: int
        """

        self._effort = effort

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501

        the status of the issue   # noqa: E501

        :return: The status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.

        the status of the issue   # noqa: E501

        :param status: The status of this Task.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def assigned_to(self):
        """Gets the assigned_to of this Task.  # noqa: E501


        :return: The assigned_to of this Task.  # noqa: E501
        :rtype: User
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this Task.


        :param assigned_to: The assigned_to of this Task.  # noqa: E501
        :type: User
        """

        self._assigned_to = assigned_to

    @property
    def reported_by(self):
        """Gets the reported_by of this Task.  # noqa: E501


        :return: The reported_by of this Task.  # noqa: E501
        :rtype: User
        """
        return self._reported_by

    @reported_by.setter
    def reported_by(self, reported_by):
        """Sets the reported_by of this Task.


        :param reported_by: The reported_by of this Task.  # noqa: E501
        :type: User
        """

        self._reported_by = reported_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
